# -*- coding: utf-8 -*-
"""License_Plate_Detection_Inference.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LuUNtXW3xE3HWa-bZeG5lX8tyIY2_Vf7
"""

# Load the unseen image
image_path = "/content/drive/MyDrive/License_Plate_data/d28d71c2690c16ed_jpg.rf.b7c4b2a5e5870d9fcf8644c109c5457f.jpg"
image_tensor = prepare_image(image_path)                                            # transfer image into tensor

with torch.no_grad():                                                               # Disable gradient computation for inference
    prediction = model(image_tensor)                                                # Perform inference

# `prediction` contains:
# - boxes: predicted bounding boxes
# - labels: predicted class labels
# - scores: predicted scores for each box (confidence level)


def get_class_name(class_id):                                                      # create function for get class name
    return COCO_CLASSES.get(class_id, "Unknown")



def draw_boxes(image, prediction, fig_size=(10, 10)):                              # create function to takes image, prediction,
    boxes = prediction[0]['boxes'].cpu().numpy()                                   # takes value of boxes
    labels = prediction[0]['labels'].cpu().numpy()                                 # takes value of labels
    scores = prediction[0]['scores'].cpu().numpy()                                 # takes value of scores

    plt.figure(figsize=fig_size)                                                   # set size of frame
    plt.imshow(image)                                                              # show image

    for box, label, score in zip(boxes, labels, scores):                           # iterate box, labels, scores
        if score > threshold:                                                      # if score is greater than threshold
            x_min, y_min, x_max, y_max = box                                       # get value of box
            class_name = get_class_name(label)                                     # get class name

            # Set text color based on class
            if class_name == "vehicle":
                text_color = "green"
            elif class_name == "License plate":
                text_color = "blue"
            else:
                text_color = "red"                                                 # fallback/default

            # Draw bounding box (still red)
            plt.gca().add_patch(plt.Rectangle(
                (x_min, y_min),
                x_max - x_min,
                y_max - y_min,
                linewidth=2,                                                       # set width of line
                edgecolor='red',                                                   # set color of line
                facecolor='none'                                                   # set facecolor
            ))

            # Draw text with class-specific color
            plt.text(x_min, y_min - 5, f"{class_name} ({score:.2f})",
                     color=text_color, fontsize=10, weight='bold',
                     bbox=dict(facecolor='white', edgecolor='none', alpha=0.7, pad=1.5))

    plt.axis('off')                                                                # remove axis
    plt.show()                                                                     # show image


# Display the image with bounding boxes and correct labels
draw_boxes(Image.open(image_path), prediction, fig_size=(12, 10))                   # Example of increased size